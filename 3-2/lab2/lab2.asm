*-----------------------------------------------------------------
* Программа реализует алгоритм управления 8 светодиодами: при
* нажатии на кнопку включения, три светодиода начинают поочерёдно
* загораться и гаснуть. Светодиоды подключены к выводам PB7-PB0 
* порта B, а кнопка - к выводу PA0 порта A. 
*-----------------------------------------------------------------

DataAddr EQU $0000 ; Адрес начала области данных
CodeAddr EQU $E000 ; Адрес начала области программы
STACK    EQU $000F ; Указатель стека
*Область данных  
	 ORG  DataAddr
portb	 EQU $1004 ; Адрес порта B
porta    EQU $1000 ; Адрес порта A

*Область программы
	ORG  CodeAddr
begin:
    lds	#STACK ; Занесение в регистр SP указателя стека

	clrb ; Очистка аккумулятора B
	stab portb ; Записываем значение акк. B в порт B -> всё выключено
    ldaa porta ; Загружаем значение с порта A в акк. A
	cmpa #%00000001 ; Проверяем, нажата ли кнопка
	beq next ; Если нажата, то переходим далее
	jmp begin ; Если нет - ждём нажатия 

next:
	ldaa #128 ; Загружаем в акк. A значение 10000000b
	ldab #1 ; Загружаем в акк. B значение итератора

loop:
	staa portb ; Записываем значение акк. А в порт B
	bsr	delay ; Подпрограмма задержки
	incb ; Инкремент значения акк. B

	cmpb #15 ; Проверяем, что алгоритм завершился
	beq begin ; Переход в начало алгоритма, если == 15
	cmpb #9 ; Иначе проверяем, что алгоритм движения вправо завершился
	bhs shift_left ; Если >= 9, то сдвиг влево
	jmp shift_right ; Иначе сдвиг вправо

shift_right:
	lsra ; Сдвиг значения акк. А вправо
	jmp loop ; Возврат к циклу

shift_left:
	lsla ; Сдвиг значения акк. А влево
	jmp loop ; Возврат к циклу

*Подпрограмма задержки
delay:
	ldx #$FFFF ; Загружаем в акк. X значение 0xFFFF
wait: 	
	dex ; Декрементируем акк. X
	cpx #$00 ; Значение в акк. X равно нулю?
	bne wait ; Если нет, то продолжаем работу подпрограммы
	rts ; Если да, то выходим из подпрограммы

*Задаём стартовый адрес программы	
	ORG  $FFFE 
    FDB  begin