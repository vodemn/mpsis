0001                         *-----------------------------------------------------------------
0002                         * Программа реализует алгоритм управления 8 светодиодами: при
0003                         * нажатии на кнопку включения, три светодиода начинают поочерёдно
0004                         * загораться и гаснуть. Светодиоды подключены к выводам PB7-PB0 
0005                         * порта B, а кнопка - к выводу PA0 порта A. 
0006                         *-----------------------------------------------------------------
0007                         
0008 0000                    DataAddr EQU $0000 ; Адрес начала области данных
0009 e000                    CodeAddr EQU $E000 ; Адрес начала области программы
0010 000f                    STACK    EQU $000F ; Указатель стека
0011                         *Область данных  
0012 0000                    	 ORG  DataAddr
0013 1004                    portb	  EQU $1004 ; Адрес порта B
0014 1000                    porta    EQU $1000 ; Адрес порта A
0015                         
0016                         *Область программы
0017 e000                    	ORG  CodeAddr
0018                         begin:
0019 e000 8e 00 0f               lds	#STACK ; Занесение в регистр SP указателя стека
0020                         
0021 e003 5f                 	clrb ; Очистка аккумулятора B
0022 e004 f7 10 04           	stab portb ; Записываем значение акк. B в порт B -> всё выключено
0023 e007 b6 10 00              ldaa porta ; Загружаем значение с порта A в акк. A
0024 e00a 81 01              	cmpa #%00000001 ; Проверяем, нажата ли кнопка
0025 e00c 27 03              	beq next ; Если нажата, то переходим далее
0026 e00e 7e e0 00           	jmp begin ; Если нет - ждём нажатия 
0027                         
0028                         next:
0029 e011 86 80              	ldaa #128 ; Загружаем в акк. A значение 10000000b
0030 e013 c6 01              	ldab #1 ; Загружаем в акк. B значение итератора
0031                         
0032                         loop:
0033 e015 b7 10 04           	staa portb ; Записываем значение акк. А в порт B
0034 e018 8d 14              	bsr	delay ; Подпрограмма задержки
0035 e01a 5c                 	incb ; Инкремент значения акк. B
0036                         
0037 e01b c1 0f              	cmpb #15 ; Проверяем, что алгоритм завершился
0038 e01d 27 e1              	beq begin ; Переход в начало алгоритма, если == 16
0039 e01f c1 09              	cmpb #9 ; Иначе проверяем, что алгоритм движения вправо завершился
0040 e021 24 07              	bhs shift_left ; Если >= 9, то сдвиг влево
0041 e023 7e e0 26           	jmp shift_right ; Иначе сдвиг вправо
0042                         
0043                         shift_right:
0044 e026 44                 	lsra ; Сдвиг значения акк. А вправо
0045 e027 7e e0 15           	jmp loop ; Возврат к циклу
0046                         
0047                         shift_left:
0048 e02a 48                 	lsla ; Сдвиг значения акк. А влево
0049 e02b 7e e0 15           	jmp loop ; Возврат к циклу
0050                         
0051                         *Подпрограмма задержки
0052                         delay:
0053 e02e ce ff ff           	ldx #$FFFF ; Загружаем в акк. X значение 0xFFFF
0054                         wait: 	
0055 e031 09                 	dex ; Декрементируем акк. X
0056 e032 8c 00 00           	cpx #$00 ; Значение в акк. X равно нулю?
0057 e035 26 fa              	bne wait ; Если нет, то продолжаем работу подпрограммы
0058 e037 39                 	rts ; Если да, то выходим из подпрограммы
0059                         
0060                         *Задаём стартовый адрес программы	
0061 fffe                    	ORG  $FFFE 
0062 fffe e0 00                 FDB  begin
